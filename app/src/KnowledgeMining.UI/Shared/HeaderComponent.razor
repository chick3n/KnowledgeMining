@using KnowledgeMining.Application.Documents.Queries.GetIndex
@using KnowledgeMining.Domain.Entities
@using KnowledgeMining.UI.Services.State
@using MediatR
@using Microsoft.AspNetCore.Hosting;
@using Microsoft.Extensions.Hosting;
@using System.Globalization
@using KnowledgeMining.UI.Helpers

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager;
@inject IMediator Mediator;
@inject DocumentCartService CartService;
@inject IWebHostEnvironment HostEnvironment;
@inject IStringLocalizer<SharedResources> Localizer

<MudAppBar Style="@($"color: {Theme.Palette.Black};background: {Theme.Palette.White}")" Elevation="1">
    <MudStack Spacing="4" Row="true">
        <MudImage Src="@_logoPath" Height="25" Elevation="0" onclick="@(() => NavigateToHomePage())" />
            <AuthorizeView Roles="@AuthorizationRoles.Required(IndexName, Roles.Read)">
                <NotAuthorized></NotAuthorized>
                <Authorized>
                    <MudButton Variant="Variant.Text" Href="@($"/search/{IndexName}/")" Target="_self">@Localizer["search"]</MudButton>
                    @*<MudButton Variant="Variant.Text" OnClick="@NavigateToDocumentsPage">Documents</MudButton>*@

                    @if(indexNavigationItems != null)
                    {
                        foreach(var nav in indexNavigationItems)
                        {
                            @if(nav.Key.Equals("<unknown>"))
                            {
                                foreach(var link in nav.Value)
                                {
                                    <MudButton 
                                        Variant="Variant.Text" Href="@link.Url" Target="_self">@GetCurrentLanguage.GetLocalizedText(link.Name)</MudButton>
                                }
                            }
                            else
                            {    
                                <MudMenu AnchorOrigin="Origin.BottomLeft"
                             FullWidth="true" Label=@Localizer["dashboards"] EndIcon="@Icons.Outlined.ArrowDropDown"
                             ButtonType="ButtonType.Button" Variant="Variant.Text">
                                    @foreach(var link in nav.Value)
                                    {
                                        <MudButton Variant="Variant.Text" Href="@link.Url" Target="_self">@GetCurrentLanguage.GetLocalizedText(@link.Name)</MudButton>
                                    }
                                </MudMenu>
                            }
                
                        }
                    }
                        </Authorized>
        </AuthorizeView>
    </MudStack>
    <MudSpacer />

    <AuthorizeView>
        <Authorized>
            <MudMenu FullWidth="true" AnchorOrigin="Origin.BottomRight" EndIcon="@Icons.Outlined.ArrowDropDown">
                <ActivatorContent>
                    <MudChip Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Person">@context.User.Identity.Name</MudChip>
                </ActivatorContent>
                <ChildContent>
                    @{
                        var current_culture = System.Threading.Thread.CurrentThread.CurrentCulture.Name;
                        @if (current_culture.StartsWith("en", StringComparison.InvariantCultureIgnoreCase))
                        {
                            <MudMenuItem OnClick="toFrench">@Localizer["Français"]</MudMenuItem>
                        }
                        else
                        {
                            <MudMenuItem OnClick="toEnglish">@Localizer["English"]</MudMenuItem>
                        }
                    }
                    <MudMenuItem Href="MicrosoftIdentity/Account/SignOut">@Localizer["Sign Out"]</MudMenuItem>
                </ChildContent>
            </MudMenu>
        </Authorized>
        <NotAuthorized>
            <a href="MicrosoftIdentity/Account/SignIn">@Localizer["Sign In"]</a>
        </NotAuthorized>
    </AuthorizeView>
</MudAppBar>

@code {
        [CascadingParameter]
        public RouteData? RouteData { get; set; }


    private Dictionary<string, List<IndexNavigationItem>>? indexNavigationItems;
    private string? IndexName { get; set; }
    private MudTheme Theme = new MudTheme();
    private string? _logoPath = "images/gac-logo-en.svg";
    private int? _cartCount;

    protected override async Task OnInitializedAsync()
    {
        if(RouteData?.RouteValues.ContainsKey("Index") ?? false)
        {
            IndexName = RouteData?.RouteValues["Index"]?.ToString();

            var response = await Mediator.Send(new GetIndexQuery(IndexName));
            indexNavigationItems = response.IndexItem.NavigationItems?
                .GroupBy(x => x.Group ?? "<unknown>")
                .OrderBy(x => x.Key)
                .ToDictionary(x => x.Key, x => x.ToList());

            if (!string.IsNullOrEmpty(response.IndexItem.Logo) &&
                Uri.TryCreate(response.IndexItem.Logo, UriKind.Absolute, out _))
                _logoPath = response.IndexItem.Logo;

            CartService.OnCartChanged += CartChanged;
        }

        await base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            Initialize().ConfigureAwait(false);
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task CartChanged(DocumentCartEvent documentCartEvent)
    {
        if (documentCartEvent?.Items?.Count != _cartCount)
        {
            _cartCount = documentCartEvent?.Items?.Count;
            StateHasChanged();
        }
    }

    private async Task Initialize()
    {
        var cartItems = await CartService.GetAll(IndexName);
        if (cartItems?.Count != _cartCount)
        {
            _cartCount = cartItems?.Count;
            StateHasChanged();
        }
    }

    CultureInfo[] cultures = new[]
    {
        new CultureInfo("en"),
        new CultureInfo("fr")
    };

    void toFrench()
    {
        Culture = cultures[1];
    }

    void toEnglish()
    {
        Culture = cultures[0];
    }

    CultureInfo Culture
    {
        get => CultureInfo.CurrentCulture;

        set
        {
            if (CultureInfo.CurrentCulture != value)
            {   
                var uri = new Uri(NavigationManager.Uri)
                        .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
                var cultureEscaped = Uri.EscapeDataString(value.Name);
                var uriEscaped = Uri.EscapeDataString(uri);

                NavigationManager.NavigateTo(
                    $"Culture/Set?culture={cultureEscaped}&redirectUri={uriEscaped}",
                    forceLoad: true);
            }
        }
    }

    private void NavigateToHomePage()
    {
        NavigationManager.NavigateTo($"/{IndexName}");
    }

    private void NavigateToSearchPage()
    {
        NavigationManager.NavigateTo($"/search/{IndexName}/");
    }

    private void NavigateToDocumentsPage()
    {
        NavigationManager.NavigateTo($"/documents/{IndexName}/");
    }
}
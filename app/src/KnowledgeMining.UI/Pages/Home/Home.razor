@page "/{index?}"

@inject NavigationManager NavigationManager
@inject IMediator Mediator
@inject IStringLocalizer<SharedResources> Localizer
@inject ILogger<Home> Logger

@using KnowledgeMining.Application.Documents.Queries.GetAutocompleteSuggestions
@using KnowledgeMining.Application.Documents.Queries.GetIndex
@using KnowledgeMining.Domain.Entities
@using KnowledgeMining.UI.Helpers

<PageTitle>@Localizer["home"]</PageTitle>

<style>
    .justify-title {
        text-align: justify;
        font-size: 49.88pt;
        line-height: 1;
    }
    .justify-title:after {
        display: inline-block;
        width: 100%;
    }
</style>

<AuthorizeView Roles="@AuthorizationRoles.Required(Index, Roles.Read, Roles.Contribute)">
    <NotAuthorized>
        <h2 class="mt-5">You are not authorized to view this page @context.User.Identity?.Name</h2>
        <a href="MicrosoftIdentity/Account/SignOut">Log out</a>
    </NotAuthorized>
    <Authorized>
        <MudPaper Height="400px" Width="100%" Class="mud-theme-info d-flex align-center" Square="true" Elevation="0">
            <MudContainer MaxWidth="MaxWidth.Small">
                <div class="justify-title">
                    @Localizer["DocCracker"]
                </div>
                @if(_indexItem != null) {
                    <div style="width:100%">
                        <MudText Typo="Typo.h5" Align="Align.Right">@GetCurrentLanguage.GetLocalizedText(_indexItem.Name)</MudText>
                    </div>
                }
                <MudPaper Style="@($"background: {Theme.Palette.White}")" Elevation="1">
                    <MudAutocomplete T="string" Label=@Localizer["WhatSearch"] @bind-Value="searchQuery" SearchFunc="@AutoComplete"
                                     ResetValueOnEmptyText="true"
                                     CoerceText="true"
                                     CoerceValue="true"
                                     Immediate="true"
                                     AdornmentIcon="@Icons.Material.Filled.Search"
                                     AdornmentColor="Color.Primary"
                                     OnAdornmentClick="@GoToSearchPage"
                                     OnKeyUp="GoToSearchPageWhenEnterPressed"
                                     Variant="Variant.Outlined"
                                     Margin="Margin.None" />
                </MudPaper>
            </MudContainer>
        </MudPaper>
        <MudPaper Width="100%" Class="" Square="true" Elevation="0">
            @if (!string.IsNullOrEmpty(_landingPageContent))
            {
                @((MarkupString)_landingPageContent)
            }
        </MudPaper>
    </Authorized>
</AuthorizeView>


@code {
    private string? searchQuery;

    [Parameter]
    public string? Index { get; set; }

    private MudTheme Theme = new MudTheme();
    private IndexItem? _indexItem;
    private string? _landingPageContent;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(Index))
            throw new ArgumentNullException(nameof(Index));
        var indexResponse = await Mediator.Send(new GetIndexQuery(Index));
        _indexItem = indexResponse.IndexItem;

        if (!string.IsNullOrEmpty(_indexItem.Landing?.PagePath))
            PullLandingPage();
    }

    private async Task<IEnumerable<string>?> AutoComplete(string value)
    {
        var results = await Mediator.Send(new GetAutocompleteSuggestionsQuery(_indexItem.IndexName, value));
        if (results.Count() == 0)
            return null;
        return results.Prepend(value).Distinct(); 
    }

    private Task GoToSearchPageWhenEnterPressed(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            GoToSearchPage();
        }

        return Task.CompletedTask;
    }

    private void GoToSearchPage()
    {
        NavigationManager.NavigateTo($"/{Index}/search?q={searchQuery ?? string.Empty}");
    }

    private void PullLandingPage()
    {
        if (_indexItem != null && !string.IsNullOrEmpty(_indexItem.Landing?.PagePath))
        {
            try {
                _landingPageContent = System.IO.File.ReadAllText($"/landings/{_indexItem.Landing.PagePath}");
            } 
            catch(Exception ex)
            {
                Logger.LogError(ex, "Failed to load landing page when {Index} config has landing page present. {LandingPage}", 
                    Index,
                    _indexItem.Landing.PagePath);
            }
        }
    }
}

